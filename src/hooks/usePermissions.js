import { useMemo } from 'react';
import { useAuth } from '../components/auth/AuthProvider';
import { logger } from '../utils/logger.js';

/**
 * Hook customizado para gerenciar permiss√µes baseadas em roles
 *
 * Roles dispon√≠veis:
 * - admin: Acesso completo (exporta√ß√µes, exclus√µes, relat√≥rios)
 * - funcionario: Apenas cadastros (sem exporta√ß√µes, exclus√µes, relat√≥rios)
 */
const usePermissions = () => {
  const { user, profile } = useAuth();

  // Determinar o role atual do usu√°rio
  const userRole = useMemo(() => {
    if (!profile) {
      logger.debug("üîç [PERMISSIONS] Profile n√£o encontrado");
      return null;
    }
    const role = profile.role || 'funcionario';
    logger.debug("üîç [PERMISSIONS] Role determinado:", role, "Profile:", profile);
    
    // Debug adicional
    logger.debug("üîç [PERMISSIONS] Profile completo:", JSON.stringify(profile, null, 2));
    logger.debug("üîç [PERMISSIONS] Email do profile:", profile.email);
    logger.debug("üîç [PERMISSIONS] Role original:", profile.role);
    logger.debug("üîç [PERMISSIONS] Role final:", role);
    
    return role;
  }, [profile]);

  // Verificar se o usu√°rio √© admin
  const isAdmin = useMemo(() => {
    const adminStatus = userRole === 'admin';
    logger.debug("üîç [PERMISSIONS] Verifica√ß√£o isAdmin:", {
      userRole,
      isAdmin: adminStatus,
      profile: profile ? { email: profile.email, role: profile.role } : null
    });
    return adminStatus;
  }, [userRole]);

  // Verificar se o usu√°rio √© funcion√°rio
  const isFuncionario = useMemo(() => {
    return userRole === 'funcionario';
  }, [userRole]);

  // Permiss√µes espec√≠ficas
  const permissions = useMemo(() => {
    return {
      // Permiss√µes de leitura
      canViewDashboard: true, // Todos podem ver o dashboard
      canViewRegistros: true, // Todos podem ver registros
      canViewAnalises: isAdmin, // Apenas admins podem ver an√°lises detalhadas

      // Permiss√µes de escrita
      canCreateRegistro: true, // Todos podem criar registros
      canEditRegistro: true, // Todos podem editar (com RLS no backend)
      canDeleteRegistro: isAdmin, // Apenas admins podem deletar
      canDuplicateRegistro: isAdmin, // Apenas admins podem duplicar

      // Permiss√µes de exporta√ß√£o e relat√≥rios
      canExportData: isAdmin, // Apenas admins podem exportar
      canExportExcel: isAdmin, // Apenas admins podem exportar Excel
      canExportPDF: isAdmin, // Apenas admins podem exportar PDF
      canViewReports: isAdmin, // Apenas admins podem ver relat√≥rios
      canViewStatistics: isAdmin, // Apenas admins podem ver estat√≠sticas detalhadas

      // Permiss√µes de gerenciamento
      canManageUsers: isAdmin, // Apenas admins podem gerenciar usu√°rios
      canViewAudit: isAdmin, // Apenas admins podem ver auditoria
      canChangeSettings: isAdmin, // Apenas admins podem alterar configura√ß√µes

      // Permiss√µes de tabela/listagem
      canBulkDelete: isAdmin, // Apenas admins podem fazer exclus√µes em massa
      canBulkEdit: isAdmin, // Apenas admins podem fazer edi√ß√µes em massa

      // Permiss√µes de localiza√ß√£o
      canViewMap: isAdmin, // Apenas admins podem ver mapa
      canExportMap: isAdmin, // Apenas admins podem exportar mapa
    };
  }, [isAdmin]);

  // Fun√ß√£o auxiliar para verificar uma permiss√£o espec√≠fica
  const hasPermission = (permission) => {
    return permissions[permission] === true;
  };

  // Fun√ß√£o para verificar m√∫ltiplas permiss√µes (retorna true se tiver TODAS)
  const hasAllPermissions = (...permissionList) => {
    return permissionList.every(permission => hasPermission(permission));
  };

  // Fun√ß√£o para verificar m√∫ltiplas permiss√µes (retorna true se tiver ALGUMA)
  const hasAnyPermission = (...permissionList) => {
    return permissionList.some(permission => hasPermission(permission));
  };

  // Obter r√≥tulo amig√°vel do role
  const getRoleLabel = useMemo(() => {
    const labels = {
      admin: 'Administrador',
      funcionario: 'Funcion√°rio',
    };
    return labels[userRole] || 'Usu√°rio';
  }, [userRole]);

  // Obter cor do badge do role
  const getRoleColor = useMemo(() => {
    const colors = {
      admin: 'bg-purple-100 text-purple-800 border-purple-300',
      funcionario: 'bg-blue-100 text-blue-800 border-blue-300',
    };
    return colors[userRole] || 'bg-gray-100 text-gray-800 border-gray-300';
  }, [userRole]);

  // Verificar se o usu√°rio tem permiss√£o para acessar uma aba espec√≠fica
  const canAccessTab = (tabId) => {
    const tabPermissions = {
      dashboard: true, // Todos podem acessar
      formulario: true, // Todos podem acessar
      registros: true, // Todos podem acessar
      analises: isAdmin, // Apenas admins
      relatorios: isAdmin, // Apenas admins (se existir)
      configuracoes: isAdmin, // Apenas admins (se existir)
      usuarios: isAdmin, // Apenas admins (se existir)
    };
    return tabPermissions[tabId] !== false;
  };

  return {
    // Informa√ß√µes do usu√°rio
    user,
    profile,
    userRole,

    // Verifica√ß√µes de role
    isAdmin,
    isFuncionario,

    // Permiss√µes
    permissions,

    // Fun√ß√µes auxiliares
    hasPermission,
    hasAllPermissions,
    hasAnyPermission,
    canAccessTab,

    // Helpers de UI
    getRoleLabel,
    getRoleColor,
  };
};

export default usePermissions;
